<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bozzlab</title>
    <link>https://bozzlab.github.io/</link>
    <description>Recent content on Bozzlab</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Bozzlab @ 2019</copyright>
    <lastBuildDate>Sun, 30 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://bozzlab.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Build &#43; Deploy] Hugo ขึ้น GitHub Pages แบบคลู ๆ </title>
      <link>https://bozzlab.github.io/post/hugo-build/</link>
      <pubDate>Sun, 30 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bozzlab.github.io/post/hugo-build/</guid>
      <description>Build/Deploy Hugo to GitHub Pages  เกริ่นก่อนว่า บทความนี้เป็น Part ต่อของ [Develop] สร้าง Blog แบบคลู ๆ ด้วย Markdown
ในบทความนี้จะกล่าวถึงขั้นตอนการ Build และ Deploy ขึ้น GitHub Pages นะครับ ส่วนการสร้าง blog ด้วย markdown กดลิงค์ด้านบนเลย
 Step แรก สร้าง Repository บน GitHub  เนื่องจากว่าเราต้องการให้ blog ของเราเป็น website ที่คนอื่นสามารถเข้ามาดูได้ ซึ่งอันที่จริงแล้วเราจะทำ server เอง หรือท่ายาก ๆ cluster อะไรบ้าบอ ก็ได้
เพียงแต่ว่าผมขี้เกียจมากเลย ใช้ github เนื่องจากง่าย เร็ว และใช้แม่งทุกวันอยู่แล้ว ตามนั้น
  ก่อนอื่นเลย ก็สร้าง repository แบบ public โดยตั้งชื่อ Repo ตามที่เราต้องการ ไม่ต้องตามผมก็ได้ ตามใจตัวเอง ชีวิตเป็นของเรา</description>
    </item>
    
    <item>
      <title>[Develop] สร้าง Blog แบบคลู ๆ ด้วย Markdown</title>
      <link>https://bozzlab.github.io/post/hugo-blog/</link>
      <pubDate>Fri, 21 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bozzlab.github.io/post/hugo-blog/</guid>
      <description>สร้างบล็อคด้วย Markdown + Hugo  เกริ่นก่อนว่า เขียนไว้ก่อนลืม ถ้าลองทำตามแล้วติดขัดตรงไหน google can help ครับ แต่ถ้าใครเบื่อ medium สิ่งนี้ก็ยังน่าสนใจอยู่ครับ
ถ้าใครเคยเขียนหรือรู้จัก Markdown หรือเคยเขียนเว็บมาแค่ HTML ก็ทำตามได้แล้วครับ gg ez มาก ๆ
 Step แรก Install + Setup Project ก่อนนะครับ ก่อนอื่นเราต้องสร้าง folder project กันก่อนนะครับ
mkdir hugo  หลังจากนั้น install hugo โดยสามารถเข้าไปได้ที่ Click เพื่ออ่าน Docs ซึ่งแต่ละ OS จะไม่เหมือนกัน โดยในบทความนี้จะอ้างอิงจาก Ubuntu นะครับ
sudo apt-get install hugo  หลังจากที่ทำการ install แล้วลองเช็ค version ดูครับ
hugo version  
โอเค ทีนี้ เราก็จะเริ่มสร้างกันเลย โดยพิมพ์ cmd ตามด้านล่างนี้ hugo จะทำการ generate engine ออกมาให้เราใช้ใน directory ของเรา</description>
    </item>
    
    <item>
      <title> !&gt;_ Bozzlab</title>
      <link>https://bozzlab.github.io/post/hello/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bozzlab.github.io/post/hello/</guid>
      <description>Bozzlab I told you already, GENIUS!</description>
    </item>
    
    <item>
      <title>Profile</title>
      <link>https://bozzlab.github.io/profile/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bozzlab.github.io/profile/</guid>
      <description>Peem Srinikorn Python/Back-End Developer.
Bangkok,Thailand
     
Education [{ &amp;quot;Education&amp;quot; : { &amp;quot;Degree&amp;quot;: &amp;quot;Bachelor in Engineering&amp;quot;, &amp;quot;Class of&amp;quot;: 2014, &amp;quot;University&amp;quot;: &amp;quot;King Mongkut&#39;s Institute of Technology Ladkrabang (KMTIL)&amp;quot; }]  Experience &amp;lt;Work Exp=&amp;quot;Work Experience&amp;quot;&amp;gt; &amp;lt;May 2019 - Present&amp;gt; • Software Engineer @ &amp;lt;Quantera Co.,LTD&amp;gt; | |&amp;gt; Improving the Automative Robot trading system using MQL4 |&amp;gt; Develop the ETL system, Which control the Dataflow, |APIs and Cron Jobs on Ubuntu server (AWS).</description>
    </item>
    
    <item>
      <title>มาลองใช้ Python สร้างโมเดล Predict ค่า Sound Transmission loss (TL/STC) [Part-2]</title>
      <link>https://bozzlab.github.io/post/model_stc_p2/</link>
      <pubDate>Mon, 12 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bozzlab.github.io/post/model_stc_p2/</guid>
      <description>Peem Srinikorn บทความนี้จะกล่าวถึง วิธีการคำนวณและผลลัพธ์แบบคร่าว ๆ ซึ่งใช้เพื่อการศึกษาเท่านั้น ไม่สามารถนำค่าคำนวณ ไปใช้เพื่ออ้างอิงสำหรับ การก่อสร้างจริงได้นะครับ
 บทความนี้เป็น Part 2 จะเกี่ยวข้องกับการ Predict TL ในระบบผนัง Double Panel, Double Panel with Absorber, Double Panel with Stud, Double Panel with Absorber and Stud, Algorithm flow รวมถึงเปรียบเทียบว่าผนังแต่ละประเภทมีลักษณะผลการ Predict ค่า Sound Tranmission loss (TL)อย่างไรบ้าง
 สำหรับใครที่ยังไม่ได้อ่าน Part 1 เกี่ยวกับ STC/TL ในฉบับเบื้องต้นและวิธีการ Predict แบบ Single Panel (Click ที่นี้ !!)

 รูปที่ 1 ระบบผนังจำแนกตามประเภทการคำนวณ 
ใน Part 1 เราได้อธิบายเรื่องของวิธีการ Predict TL ของ Single Panel ไปแล้ว ซึ่งใน Part นี้จะเข้าเรื่อง Double Panel, Absorber, Connection ซึ่งเป็นระบบที่พบได้ทั่วไปตามตึกบ้าน อาคารโดยเฉพาะกับ ผนังเบา</description>
    </item>
    
    <item>
      <title>มาลองใช้ Python สร้างโมเดล Predict ค่า Sound Transmission loss (TL/STC)</title>
      <link>https://bozzlab.github.io/post/model_stc_p1/</link>
      <pubDate>Fri, 02 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bozzlab.github.io/post/model_stc_p1/</guid>
      <description>บทความนี้จะกล่าวถึง วิธีการคำนวณและผลลัพธ์แบบคร่าว ๆ ซึ่งใช้เพื่อการศึกษาเท่านั้น ไม่สามารถนำค่าคำนวณ ไปใช้เพื่ออ้างอิงสำหรับ การก่อสร้างจริงได้นะครับ
Click อ่าน Part 2 : Double Panel and Double Panel with Absorber Insulation, Stud Connection
 ก่อนอื่น เรามาดูกันว่า Sound Tranmission Loss , STC คืออะไรกันก่อน Sound Transmission Loss คืออะไร ?
 Sound Transmission Loss คืออะไร ? 
 รูปที่ 1 แสดงตัวอย่าง Sound Transmission loss 
คือ ดัชนีที่บ่งบอกถึงประสิทธิภาพของการป้องกันเสียง ในทีนี้เราจะหมายถึง ผนัง กำแพง กระจก ที่เป็นตัวกลางกั้นห้องนั้น (Partition) ว่ามีประสิทธิภาพป้องกันเสียงได้เท่าไร
โดยจากรูปที่ 1 จะเห็นว่า มีพลังงานเสียงความถี่หลายจำนวน ซึ่งมีระดับความดังที่แตกต่างกัน และความดังเสียงที่ผ่านกำแพงนี้ไปก็จะถูกลดทอนในระดับที่แตกต่างกันตามความถี่ต่าง ๆ เช่น
 ความถี่ี่ 125 Hz 80–60 = 20 dB</description>
    </item>
    
    <item>
      <title>Article/Blog</title>
      <link>https://bozzlab.github.io/archive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bozzlab.github.io/archive/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>